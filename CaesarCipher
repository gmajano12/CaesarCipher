import edu.duke.*;
import org.apache.commons.csv.*; 
/**
 * Write a description of class CaesarCipher here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class CaesarCipher
{
    public String encrypt(String input, int key){
        //Make a StringBuilder with message (enrypted)
        StringBuilder encrypted = new StringBuilder(input);
        //Write down the alphabet
        String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        //Compute the shifted alphabet
        String shiftedAlphabet = alphabet.substring(key) + alphabet.substring(0, key); 
        //count from 0 to < length of encrypted , (call it i) 
        for(int i = 0 ; i< encrypted.length(); i++){
            //Look at ith character of encrypted (call it currChar) 
            char currChar = encrypted.charAt(i);
            //Find the index of currChar in the alphabet(call it idx) 
            int idx = alphabet.indexOf(currChar);
            //If currChar is in the alphabet
            if(idx != -1){
                //Get the idxth character of shiftedAlphabet(newChar) 
                char newChar = shiftedAlphabet.charAt(idx); 
                //Replace the ith character of encrypted with newChar 
                encrypted.setCharAt(i, newChar); 
            }
        }
        return encrypted.toString(); 
    }
    public void testCaesar(){
        int key = 17 ; 
        FileResource fr = new FileResource(); 
        String message = fr.asString(); 
        String encrypted = encrypt(message , key); 
        System.out.println(encrypted);
        String decrypted = encrypt(encrypted,26-key); 
        System.out.println(decrypted); 
    }
    
    public boolean isVowel (char ch){
        if( ch == 'a' || ch== 'e' || ch== 'i'|| ch== 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I'|| ch == 'O' || ch == 'U'){
            return true; 
        }
        return false ; 
    }
    
    public void testVowel(){
        System.out.println("isVowel('F') should return false:" + isVowel('F')); 
        System.out.println("isVowel('a') should return true:" + isVowel ('a')); 
    }
    
    public String replaceVowels(String phrase, char ch) {
    StringBuilder newString = new StringBuilder(phrase);
    
    for(int i=0; i<phrase.length(); i++) {
        if (isVowel(newString.charAt(i))) {
        newString.setCharAt(i,ch);
        }
        
    }
         return newString.toString();
    }
    
    public void testReplaceVowels(){
        System.out.println(replaceVowels("How is my life", '~')); 
        System.out.println(replaceVowels("How is my life", '*')); 
        System.out.println(replaceVowels("How is my life", '+')); 
        
    }
    
     public String emphasize(String phrase, char ch1, char ch2){
        StringBuilder newString = new StringBuilder(phrase); 
        for(int i=0; i< phrase.length(); i++){
            if(isVowel(newString.charAt(i))){
                if(i%2==0){
                    newString.setCharAt(i, '+');
                }
                else{
                    newString.setCharAt(i, '*'); 
            }
        }
    }
     return newString.toString(); 
}

public void testEmphasize (){
    System.out.println(emphasize("How is my life", '*', '+')); 
}

public String encryptTwo(String input, int key1,int key2){ 
    input = input.toUpperCase(); 
    StringBuilder encr = new StringBuilder(input); 
    String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; 
    String shiftedAlphabet1 = alphabet.substring(key1) + alphabet.substring(0,key1);
    String shiftedAlphabet2 = alphabet.substring(key2) + alphabet.substring(0,key2); 
    for(int i=0; i< encr.length(); i++){
        char currentChar= encr.charAt(i); 
        int index = alphabet.indexOf(currentChar); 
        if(index!=-1){
            if(index%2==0){
                char newChar = shiftedAlphabet1.charAt(index);
                encr.setCharAt(i,newChar);
            }
            else{
                char newChar = shiftedAlphabet2.charAt(index); 
                encr.setCharAt(i,newChar); 
            }
        }
    }
    return encr.toString(); 
}

public void testTwoKeys(){
    int key1 = 17; 
    int key2 = 3; 
    FileResource fr = new FileResource(); 
    String message = fr.asString();
    String encrypted1 = encrypt(message, key1); 
    System.out.println(encrypted1);
    String decrypted1 = encrypt(encrypted1, 26-key1); 
    System.out.println(decrypted1); 
    
     String encrypted2 = encrypt(message, key2); 
    System.out.println(encrypted2);
    String decrypted2 = encrypt(encrypted2 , 26-key2); 
    System.out.println(decrypted2); 
}
}

